1. If you create a constructor method to build a DVD by title then create a constructor method to build a DVD by category. Does Java allow you to do this?

Answer: Yes, Java allows you to create multiple constructors in a class. The constructors must have different parameters. The constructors are differentiated by the number of parameters or the data type of the parameters.

2. Is Java a Pass by Value or a Pass by Reference programming language? (Already answered in the PDF)

Answer: Java is a pass by value programming language. In Java, the actual parameter is passed to the method. The method receives a copy of the actual parameter. The changes made to the parameter inside the method do not affect the actual parameter.

3. After the call of swap(jungleDVD, cinderellaDVD) why does the title of these two objects still remain?

Answer: The title of the two objects remains the same because Java is a pass by value programming language. When the swap method is called, the references to the objects are passed by value. Therefore, any changes made to the references inside the swap method do not affect the original references outside the method.

4. After the call of changeTitle(jungleDVD, cinderellaDVD.getTitle()) why is the title of the JungleDVD changed?

Answer: The title of the JungleDVD is changed because the changeTitle method takes a reference to the object as a parameter. When the method is called, the reference to the jungleDVD object is passed, and any changes made to the title inside the method affect the original object.

5. Which classes are aggregates of other classes?
Answer:

CompactDisc:
   - Aggregates Track objects.
   - The tracks list is initialized in the class, and methods like addTrack and removeTrack manage the Track objects.

Book:
   - Aggregates String objects representing authors.
   - The authors list is initialized in the class, and methods like addAuthor and removeAuthor manage the authors.

Cart:
   - Aggregates Media objects.
   - The itemsOrdered list is initialized in the class, and methods like addMedia and removeMedia manage the Media objects.

Store:
   - Aggregates Media objects.
   - The itemsInStore list is initialized in the class, and methods like addMedia and removeMedia manage the Media objects.


Alternatively, to compare items in the cart, instead of using the Comparator class I have mentioned, you can use the Comparable interface and override the compareTo() method. You can refer to the Java docs to see the information of this interface.
Suppose we are taking this Comparable interface approach.
6. What class should implement the Comparable interface?
Answer: The Media class should implement the Comparable interface. This allows the Media objects to be compared based on their titles, which is useful for sorting and searching in the cart and store.

7. In those classes, how should you implement the compareTo() method to reflect the ordering that we want?
Answer: In the Media class, the compareTo() method should compare the titles of the Media objects. The method should return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. Notice that compareTo() method only compares one attribute of the Media class, which is the title.

8. Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
Answer: Sadly, we cannot have two ordering rules using the Comparable interface approach. The compareTo() method can only implement one ordering rule. If we want to have multiple ordering rules, we can create separate Comparator classes for each ordering rule and use them when sorting or comparing Media objects.

9. Suppose the DVDs have a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?
Answer:
```java
@Override
public int compareTo(Media other) {
    if (this instanceof DVD && other instanceof DVD) {
        DVD thisDVD = (DVD) this;
        DVD otherDVD = (DVD) other;
        int titleComparison = thisDVD.getTitle().compareTo(otherDVD.getTitle());
        if (titleComparison != 0) {
            return titleComparison;
        }
        // Compare by length in decreasing order
        return Integer.compare(otherDVD.getLength(), thisDVD.getLength());
    } else {
        // Default comparison for other media types
        return this.title.compareTo(other.title);
    }
}
```